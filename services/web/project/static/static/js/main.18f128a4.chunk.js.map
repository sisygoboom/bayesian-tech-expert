{"version":3,"sources":["views/Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["Homepage","props","state","questions_so_far","answers_so_far","question","question_id","prediction","questionAdd","techs_left","techs_so_far","tech_answers_so_far","new_question","techAdd","questions_left","new_tech","techNeeded","this","init","a","setState","axios","post","then","r","data","tech","undefined","weight","console","log","push","answers","forEach","key","i","techs","filter","n","includes","alert","message","name","Button","variant","onClick","answerQuestion","resetGame","addQuestion","startAddTech","Form","Control","placeholder","value","onChange","e","updateQuestion","target","map","updateTech","addTech","Component","App","className","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18f128a4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Button, Form} from \"react-bootstrap\";\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class Homepage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            questions_so_far: [],\r\n            answers_so_far: [],\r\n            question: '',\r\n            question_id: 0,\r\n            prediction: false,\r\n            questionAdd: false,\r\n            techs_left: [],\r\n            techs_so_far: [],\r\n            tech_answers_so_far: [],\r\n            new_question: '',\r\n            techAdd: false,\r\n            questions_left: [],\r\n            new_tech: '',\r\n            techNeeded: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.init()\r\n    }\r\n\r\n    async resetGame() {\r\n        await this.setState({\r\n            questions_so_far: [],\r\n            answers_so_far: [],\r\n            prediction: false,\r\n        })\r\n        this.init()\r\n    }\r\n\r\n    init() {\r\n        axios.post('/api/answer', {}).then(r => {\r\n            let question = r.data.question\r\n            let question_id = r.data.question_id\r\n\r\n            this.setState({question, question_id})\r\n        })\r\n    }\r\n\r\n    async addQuestion(tech = undefined, weight = 0.5) {\r\n        console.log(tech)\r\n        if (tech) {\r\n            let techs_so_far = this.state.techs_so_far\r\n            let tech_answers_so_far = this.state.tech_answers_so_far\r\n            techs_so_far.push(tech)\r\n            tech_answers_so_far.push(weight)\r\n            console.log(techs_so_far, tech_answers_so_far)\r\n            await this.setState({techs_so_far, tech_answers_so_far})\r\n        }\r\n        let answers = {};\r\n        this.state.techs_so_far.forEach((key, i) => answers[key] = this.state.tech_answers_so_far[i]);\r\n        console.log(answers)\r\n        axios.post('/api/add/question', {question: this.state.new_question, answers}).then(r => {\r\n            if (r.data.techs) {\r\n                let techs_left = r.data.techs.filter(n => !this.state.techs_so_far.includes(n))\r\n                this.setState({\r\n                    techs_left,\r\n                    questionAdd: true,\r\n                    prediction: false\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    questionAdd: false,\r\n                    new_question: '',\r\n                    tech_answers_so_far: [],\r\n                    techs_so_far: []\r\n                })\r\n                alert(r.data.message)\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    startQuestionAdd() {\r\n        this.setState({questionAdd: true, prediction: false})\r\n    }\r\n\r\n    startAddTech() {\r\n        this.setState({techAdd: true, prediction: false})\r\n    }\r\n\r\n    async addTech(question = undefined, weight = 0.5) {\r\n        if (question) {\r\n            let questions_so_far = this.state.questions_so_far\r\n            let answers_so_far = this.state.answers_so_far\r\n            questions_so_far.push(question)\r\n            answers_so_far.push(weight)\r\n            console.log(questions_so_far, answers_so_far)\r\n            await this.setState({questions_so_far, answers_so_far})\r\n        }\r\n        let answers = {};\r\n        this.state.questions_so_far.forEach((key, i) => answers[key] = this.state.answers_so_far[i]);\r\n        axios.post('/api/add/tech', {name: this.state.new_tech, answers}).then(r => {\r\n            let questions_left = r.data.questions_left\r\n            console.log(questions_left)\r\n            if (questions_left) {\r\n                this.setState({\r\n                    questions_left,\r\n                    techNeeded: false\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    techAdd: false,\r\n                    new_tech: '',\r\n                    answers_so_far: [],\r\n                    questions_so_far: []\r\n                })\r\n                alert(r.data.message)\r\n            }\r\n        })\r\n    }\r\n\r\n    updateQuestion(new_question) {\r\n        this.setState({new_question})\r\n    }\r\n\r\n    updateTech(new_tech) {\r\n        this.setState({new_tech})\r\n    }\r\n\r\n    async answerQuestion(weight) {\r\n        let answers_so_far = this.state.answers_so_far\r\n        let questions_so_far = this.state.questions_so_far\r\n        answers_so_far.push(weight)\r\n        questions_so_far.push(this.state.question_id)\r\n        await this.setState({answers_so_far})\r\n        axios.post('/api/answer', {answers_so_far, questions_so_far}).then(r => {\r\n            let prediction = r.data.prediction\r\n            let question = r.data.question\r\n            let question_id = r.data.question_id\r\n            if (prediction) {\r\n                this.setState({prediction})\r\n            } else {\r\n                this.setState({question, question_id, questions_so_far})\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {(!this.state.prediction && !this.state.questionAdd && !this.state.techAdd) && (\r\n                    <>\r\n                        <h2>{this.state.question}</h2>\r\n                        <Button variant={'outline-secondary'} onClick={() => {this.answerQuestion(1)}}>Yes</Button><br />\r\n                        <Button variant={'outline-secondary'} onClick={() => {this.answerQuestion(0.75)}}>Probably</Button><br />\r\n                        <Button variant={'outline-secondary'} onClick={() => {this.answerQuestion(0.5)}}>Don't know/Not applicable</Button><br />\r\n                        <Button variant={'outline-secondary'} onClick={() => {this.answerQuestion(0.25)}}>Probably not</Button><br />\r\n                        <Button variant={'outline-secondary'} onClick={() => {this.answerQuestion(0)}}>No</Button>\r\n                    </>\r\n                )}\r\n                {this.state.prediction && (\r\n                    <>\r\n                        <h2>{this.state.prediction}</h2>\r\n                        <Button variant={'outline-secondary'} onClick={() => {this.resetGame()}}>Restart</Button><br />\r\n                        <h4>Not correct?</h4>\r\n                        <Button variant={'outline-secondary'} onClick={() => {this.addQuestion()}}>Add a new question</Button><br />\r\n                        <Button variant={'outline-secondary'} onClick={() => {this.startAddTech()}}>Use the questions you've already answered to add a new tech</Button>\r\n                    </>\r\n                )}\r\n                {this.state.questionAdd && (\r\n                    <>\r\n                        <Form.Control placeholder={'Type question here...'} value={this.state.new_question} onChange={(e) => this.updateQuestion(e.target.value)} />\r\n                        {this.state.new_question && (\r\n                            <>\r\n                                {this.state.techs_left.map(e => (\r\n                                        <>\r\n                                            <h2>{this.state.new_question} - {e}</h2>\r\n                                            <Button variant={'outline-secondary'} onClick={() => {this.addQuestion(e,1)}}>Yes</Button><br />\r\n                                            <Button variant={'outline-secondary'} onClick={() => {this.addQuestion(e,0.75)}}>Probably</Button><br />\r\n                                            <Button variant={'outline-secondary'} onClick={() => {this.addQuestion(e,0.5)}}>Don't know/Not applicable</Button><br />\r\n                                            <Button variant={'outline-secondary'} onClick={() => {this.addQuestion(e,0.25)}}>Probably not</Button><br />\r\n                                            <Button variant={'outline-secondary'} onClick={() => {this.addQuestion(e,0)}}>No</Button>\r\n                                        </>\r\n                                    )\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n                {this.state.techAdd && (\r\n                    <>\r\n                        <Form.Control placeholder={'Type technology here...'} value={this.state.new_tech} onChange={(e) => this.updateTech(e.target.value)} />\r\n                        {this.state.techNeeded && (\r\n                            <>\r\n                                <Button variant={'outline-secondary'} onClick={() => {this.addTech()}}>Done</Button>\r\n                            </>\r\n                        )}\r\n                        {this.state.new_tech && (\r\n                            <>\r\n                                {this.state.questions_left.map(e => (\r\n                                    <>\r\n                                        <h2>{this.state.new_tech} - {e.question}</h2>\r\n                                        <Button variant={'outline-secondary'} onClick={() => {this.addTech(e.question_id,1)}}>Yes</Button><br />\r\n                                        <Button variant={'outline-secondary'} onClick={() => {this.addTech(e.question_id,0.75)}}>Probably</Button><br />\r\n                                        <Button variant={'outline-secondary'} onClick={() => {this.addTech(e.question_id,0.5)}}>Don't know/Not applicable</Button><br />\r\n                                        <Button variant={'outline-secondary'} onClick={() => {this.addTech(e.question_id,0.25)}}>Probably not</Button><br />\r\n                                        <Button variant={'outline-secondary'} onClick={() => {this.addTech(e.question_id,0)}}>No</Button>\r\n                                    </>\r\n                                ))}\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}","import './App.css';\nimport Homepage from \"./views/Homepage\";\nimport {Container} from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Container>\n              <Homepage />\n          </Container>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}